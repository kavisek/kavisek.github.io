Title: XG Boost Classifier
Date: 2018-9-22 00:00
Category: Novice
Tags: Python
Slug: XG Boost Classifier
Author: Kavi Sekhon
Summary: XG Boost is a pretty famous machine learning algorithm introduced in 2012. XG Boost is a gradient boosting decision tree algorithm. Instead of t..{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<span>XG Boost is a pretty famous machine learning algorithm introduced in 2012. XG Boost is a gradient boosting decision tree algorithm. Instead of training a large ensemble of trees at once (like in the Random Forest Algorithm), XG Boost will train the group of trees one by one, calculating the error after building each tree, then building the next tree to reduce the previous mistake. The final predictor will be an average of all the trees.</span>\n",
    "\n",
    "In this notebook, I will be looking at the famous breastcancer dataset. This dataset is a multi-class classification problem, where I need to predict the correct target for each observation from a range of possible classes. We will attempt to predict the proper target class using this model, given the feature of each type of class, I often reuse this dataset between my tree-based notebooks. Using the same dataset makes it very easy to compare and contrast the performance of different tree-based models, and keep the trees a reasonable size. \n",
    "\n",
    "**Dataset**\n",
    "\n",
    "Breast Cancer Dataset: https://www.kaggle.com/hdza1991/breast-cancer-wisconsin-data-set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Preliminaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-09-29T07:59:49.428156Z",
     "start_time": "2018-09-29T07:59:48.620207Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format='retina'\n",
    " \n",
    "# Import modules\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "import numpy as np\n",
    "import pandas as pd \n",
    "import seaborn\n",
    "import warnings\n",
    "\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "# Set pandas options\n",
    "pd.set_option('max_columns',1000)\n",
    "pd.set_option('max_rows',30)\n",
    "pd.set_option('display.float_format', lambda x: '%.3f' % x)\n",
    "\n",
    "# Set plotting options\n",
    "mpl.rcParams['figure.figsize'] = (9.0, 3.0)\n",
    "\n",
    "# Set warning options\n",
    "warnings.filterwarnings('ignore');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-09-29T07:59:49.805920Z",
     "start_time": "2018-09-29T07:59:49.732437Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>radius error</th>\n",
       "      <th>texture error</th>\n",
       "      <th>perimeter error</th>\n",
       "      <th>area error</th>\n",
       "      <th>smoothness error</th>\n",
       "      <th>compactness error</th>\n",
       "      <th>concavity error</th>\n",
       "      <th>concave points error</th>\n",
       "      <th>symmetry error</th>\n",
       "      <th>fractal dimension error</th>\n",
       "      <th>worst radius</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13.010</td>\n",
       "      <td>22.220</td>\n",
       "      <td>82.010</td>\n",
       "      <td>526.400</td>\n",
       "      <td>0.063</td>\n",
       "      <td>0.019</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.140</td>\n",
       "      <td>0.052</td>\n",
       "      <td>0.173</td>\n",
       "      <td>1.142</td>\n",
       "      <td>1.101</td>\n",
       "      <td>14.340</td>\n",
       "      <td>0.003</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.016</td>\n",
       "      <td>0.001</td>\n",
       "      <td>14.000</td>\n",
       "      <td>29.020</td>\n",
       "      <td>88.180</td>\n",
       "      <td>608.800</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.034</td>\n",
       "      <td>0.008</td>\n",
       "      <td>0.009</td>\n",
       "      <td>0.230</td>\n",
       "      <td>0.058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.780</td>\n",
       "      <td>18.800</td>\n",
       "      <td>109.300</td>\n",
       "      <td>886.300</td>\n",
       "      <td>0.089</td>\n",
       "      <td>0.092</td>\n",
       "      <td>0.084</td>\n",
       "      <td>0.066</td>\n",
       "      <td>0.189</td>\n",
       "      <td>0.055</td>\n",
       "      <td>0.599</td>\n",
       "      <td>1.391</td>\n",
       "      <td>4.129</td>\n",
       "      <td>67.340</td>\n",
       "      <td>0.006</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.016</td>\n",
       "      <td>0.021</td>\n",
       "      <td>0.003</td>\n",
       "      <td>20.050</td>\n",
       "      <td>26.300</td>\n",
       "      <td>130.700</td>\n",
       "      <td>1260.000</td>\n",
       "      <td>0.117</td>\n",
       "      <td>0.212</td>\n",
       "      <td>0.232</td>\n",
       "      <td>0.147</td>\n",
       "      <td>0.281</td>\n",
       "      <td>0.072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.460</td>\n",
       "      <td>24.040</td>\n",
       "      <td>83.970</td>\n",
       "      <td>475.900</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.240</td>\n",
       "      <td>0.227</td>\n",
       "      <td>0.085</td>\n",
       "      <td>0.203</td>\n",
       "      <td>0.082</td>\n",
       "      <td>0.298</td>\n",
       "      <td>1.599</td>\n",
       "      <td>2.039</td>\n",
       "      <td>23.940</td>\n",
       "      <td>0.007</td>\n",
       "      <td>0.072</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.014</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.010</td>\n",
       "      <td>15.090</td>\n",
       "      <td>40.680</td>\n",
       "      <td>97.650</td>\n",
       "      <td>711.400</td>\n",
       "      <td>0.185</td>\n",
       "      <td>1.058</td>\n",
       "      <td>1.105</td>\n",
       "      <td>0.221</td>\n",
       "      <td>0.437</td>\n",
       "      <td>0.207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12.830</td>\n",
       "      <td>22.330</td>\n",
       "      <td>85.260</td>\n",
       "      <td>503.200</td>\n",
       "      <td>0.109</td>\n",
       "      <td>0.180</td>\n",
       "      <td>0.170</td>\n",
       "      <td>0.069</td>\n",
       "      <td>0.212</td>\n",
       "      <td>0.073</td>\n",
       "      <td>0.306</td>\n",
       "      <td>1.069</td>\n",
       "      <td>2.257</td>\n",
       "      <td>25.130</td>\n",
       "      <td>0.007</td>\n",
       "      <td>0.039</td>\n",
       "      <td>0.047</td>\n",
       "      <td>0.015</td>\n",
       "      <td>0.017</td>\n",
       "      <td>0.006</td>\n",
       "      <td>15.200</td>\n",
       "      <td>30.150</td>\n",
       "      <td>105.300</td>\n",
       "      <td>706.000</td>\n",
       "      <td>0.178</td>\n",
       "      <td>0.534</td>\n",
       "      <td>0.628</td>\n",
       "      <td>0.198</td>\n",
       "      <td>0.341</td>\n",
       "      <td>0.124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.600</td>\n",
       "      <td>18.950</td>\n",
       "      <td>69.280</td>\n",
       "      <td>346.400</td>\n",
       "      <td>0.097</td>\n",
       "      <td>0.115</td>\n",
       "      <td>0.064</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.192</td>\n",
       "      <td>0.065</td>\n",
       "      <td>0.451</td>\n",
       "      <td>1.197</td>\n",
       "      <td>3.430</td>\n",
       "      <td>27.100</td>\n",
       "      <td>0.007</td>\n",
       "      <td>0.036</td>\n",
       "      <td>0.034</td>\n",
       "      <td>0.014</td>\n",
       "      <td>0.035</td>\n",
       "      <td>0.003</td>\n",
       "      <td>11.880</td>\n",
       "      <td>22.940</td>\n",
       "      <td>78.280</td>\n",
       "      <td>424.800</td>\n",
       "      <td>0.121</td>\n",
       "      <td>0.252</td>\n",
       "      <td>0.192</td>\n",
       "      <td>0.079</td>\n",
       "      <td>0.294</td>\n",
       "      <td>0.076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "0       13.010        22.220          82.010    526.400            0.063   \n",
       "1       16.780        18.800         109.300    886.300            0.089   \n",
       "2       12.460        24.040          83.970    475.900            0.119   \n",
       "3       12.830        22.330          85.260    503.200            0.109   \n",
       "4       10.600        18.950          69.280    346.400            0.097   \n",
       "\n",
       "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "0             0.019           0.002                0.002          0.140   \n",
       "1             0.092           0.084                0.066          0.189   \n",
       "2             0.240           0.227                0.085          0.203   \n",
       "3             0.180           0.170                0.069          0.212   \n",
       "4             0.115           0.064                0.026          0.192   \n",
       "\n",
       "   mean fractal dimension  radius error  texture error  perimeter error  \\\n",
       "0                   0.052         0.173          1.142            1.101   \n",
       "1                   0.055         0.599          1.391            4.129   \n",
       "2                   0.082         0.298          1.599            2.039   \n",
       "3                   0.073         0.306          1.069            2.257   \n",
       "4                   0.065         0.451          1.197            3.430   \n",
       "\n",
       "   area error  smoothness error  compactness error  concavity error  \\\n",
       "0      14.340             0.003              0.002            0.002   \n",
       "1      67.340             0.006              0.025            0.026   \n",
       "2      23.940             0.007              0.072            0.077   \n",
       "3      25.130             0.007              0.039            0.047   \n",
       "4      27.100             0.007              0.036            0.034   \n",
       "\n",
       "   concave points error  symmetry error  fractal dimension error  \\\n",
       "0                 0.002           0.016                    0.001   \n",
       "1                 0.016           0.021                    0.003   \n",
       "2                 0.014           0.018                    0.010   \n",
       "3                 0.015           0.017                    0.006   \n",
       "4                 0.014           0.035                    0.003   \n",
       "\n",
       "   worst radius  worst texture  worst perimeter  worst area  worst smoothness  \\\n",
       "0        14.000         29.020           88.180     608.800             0.081   \n",
       "1        20.050         26.300          130.700    1260.000             0.117   \n",
       "2        15.090         40.680           97.650     711.400             0.185   \n",
       "3        15.200         30.150          105.300     706.000             0.178   \n",
       "4        11.880         22.940           78.280     424.800             0.121   \n",
       "\n",
       "   worst compactness  worst concavity  worst concave points  worst symmetry  \\\n",
       "0              0.034            0.008                 0.009           0.230   \n",
       "1              0.212            0.232                 0.147           0.281   \n",
       "2              1.058            1.105                 0.221           0.437   \n",
       "3              0.534            0.628                 0.198           0.341   \n",
       "4              0.252            0.192                 0.079           0.294   \n",
       "\n",
       "   worst fractal dimension  \n",
       "0                    0.058  \n",
       "1                    0.072  \n",
       "2                    0.207  \n",
       "3                    0.124  \n",
       "4                    0.076  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import Breast Cancer data\n",
    "breast_cancer = load_breast_cancer()\n",
    "X, y = breast_cancer.data, breast_cancer.target\n",
    "\n",
    "# Conduct a train-test split on the data\n",
    "train_x, test_x, train_y, test_y = train_test_split(X,y)\n",
    "\n",
    "# View the training dataframe\n",
    "pd.DataFrame(train_x, columns=breast_cancer['feature_names']).head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-09-29T07:59:51.140481Z",
     "start_time": "2018-09-29T07:59:50.881532Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 277,
       "width": 377
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a barplot of the target clasees\n",
    "pd.Series(train_y).value_counts().plot.barh(grid=False, \n",
    "                                            color=['#B2E2E2','#66C2A4'], \n",
    "                                            width=0.25,edgecolor='w')\n",
    "plt.title('Target Outcomes')\n",
    "plt.ylabel('Class')\n",
    "plt.xlabel('Measure of Disease Progression');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fit the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:52.067Z"
    }
   },
   "outputs": [],
   "source": [
    "# Fit the intial model\n",
    "xgb_model = XGBClassifier(n_estimators=100, n_jobs=-1)\n",
    "xgb_model.fit(train_x, train_y);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Cross Validation Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.625Z"
    }
   },
   "outputs": [],
   "source": [
    "# View the cross validation score of the intial model\n",
    "scores = cross_val_score(xgb_model, train_x, train_y, cv=10,\n",
    "               scoring='accuracy')\n",
    "print(f'Cross Validation Score: {scores.mean():.5f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Confustion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.629Z"
    }
   },
   "outputs": [],
   "source": [
    "# Training Confusion Matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "cmatrix = pd.DataFrame(confusion_matrix(train_y, xgb_model.predict(train_x)))\n",
    "cmatrix.index.name = 'class'\n",
    "\n",
    "cmatrix['result'] = 'actual'\n",
    "cmatrix.set_index('result', append=True, inplace=True)\n",
    "cmatrix = cmatrix.reorder_levels(['result', 'class'])\n",
    "cmatrix = cmatrix.stack()\n",
    "cmatrix = pd.DataFrame(cmatrix)\n",
    "cmatrix.columns = ['prediction']\n",
    "cmatrix.unstack()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Feature Importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.631Z"
    }
   },
   "outputs": [],
   "source": [
    "# Plot Tree's Feature Importance\n",
    "plt.figure(figsize=(10,5))\n",
    "n_features = breast_cancer.data.shape[1]\n",
    "plt.barh(range(n_features), xgb_model.feature_importances_, align='center',\n",
    "         color='#4D977E')\n",
    "plt.yticks(np.arange(n_features), breast_cancer.feature_names)\n",
    "plt.title('XGBoost Feature Importance')\n",
    "plt.xlabel(\"Feature importance\")\n",
    "plt.ylabel(\"Features\")\n",
    "plt.ylim(-1, n_features);\n",
    "plt.xlim(0,0.25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Parameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.635Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define paraameter range and score lists\n",
    "n_estimators_range = np.arange(0,300, 25)[1:]\n",
    "train_score = []\n",
    "test_score = []\n",
    "\n",
    "# Train a knn_model for every neighbour value in our list\n",
    "for i in n_estimators_range:\n",
    "    xgb_model=XGBClassifier(n_estimators = i, n_jobs=-1).fit(train_x,train_y)\n",
    "    train_score.append(cross_val_score(xgb_model, train_x, \n",
    "                                       train_y, cv=10, \n",
    "                                       scoring='accuracy').mean())\n",
    "    test_score.append(cross_val_score(xgb_model, test_x, \n",
    "                                      test_y, cv=10, \n",
    "                                      scoring='accuracy').mean())\n",
    "# Plot our results\n",
    "mpl.rcParams['figure.figsize'] = (9.0, 6.0)\n",
    "plt.plot(n_estimators_range,train_score,label=\"Train\",linewidth=2, color='#66C2A4') \n",
    "plt.plot(n_estimators_range,test_score,label=\"Test\", linewidth=2,linestyle='--', color='#B2E2E2')\n",
    "plt.legend()\n",
    "plt.title('Random Forest Model')\n",
    "plt.xlabel('Number of Estimators')\n",
    "plt.ylabel('Accuracy');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Grid Searching Turnning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.637Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Set up parameter grid\n",
    "grid = {'n_estimators':np.arange(0,100, 25)[1:],\n",
    "        'learning_rate': [0.01, 0.025, 0.05,0.005],\n",
    "        'max_depth':list(range(2,30,4)),\n",
    "        'booster': ['gbtree','gblinear','dart'],\n",
    "        'reg_alpha':[0,1]}\n",
    "\n",
    "# Conduct gird search\n",
    "grid_search = GridSearchCV(estimator=xgb_model, param_grid=grid, \n",
    "                     scoring='accuracy', n_jobs=-1, refit=True, cv=10,\n",
    "                     return_train_score=True)\n",
    "# Fit model\n",
    "grid_search.fit(train_x,train_y);\n",
    "\n",
    "# Print out the parameter for the best score\n",
    "print('Accuracy of best parameters: %.5f'%grid_search.best_score_)\n",
    "print('Best parameters: %s' %grid_search.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.640Z"
    }
   },
   "outputs": [],
   "source": [
    "# Fit the final model\n",
    "xgb_model = XGBClassifier(booster='gbtree', learning_rate=0.05,\n",
    "                          max_depth=6, n_estimators = 75)\n",
    "xgb_model.fit(train_x, train_y)\n",
    "\n",
    "# View the cross validation score of the intial model\n",
    "scores = cross_val_score(xgb_model, train_x, train_y, cv=10,\n",
    "               scoring='accuracy')\n",
    "print(f'Cross Validation Score: {scores.mean():.5f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Confustion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.644Z"
    }
   },
   "outputs": [],
   "source": [
    "# Training confusion matrix \n",
    "from sklearn.metrics import confusion_matrix\n",
    "cmatrix = pd.DataFrame(confusion_matrix(train_y, xgb_model.predict(train_x)))\n",
    "cmatrix.index.name = 'class'\n",
    "\n",
    "cmatrix['result'] = 'actual'\n",
    "cmatrix.set_index('result', append=True, inplace=True)\n",
    "cmatrix = cmatrix.reorder_levels(['result', 'class'])\n",
    "cmatrix = cmatrix.stack()\n",
    "cmatrix = pd.DataFrame(cmatrix)\n",
    "cmatrix.columns = ['prediction']\n",
    "cmatrix.unstack()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Feature Importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.647Z"
    }
   },
   "outputs": [],
   "source": [
    "# Plot ensembles's feature importance\n",
    "plt.figure(figsize=(10,5))\n",
    "n_features = breast_cancer.data.shape[1]\n",
    "plt.barh(range(n_features), xgb_model.feature_importances_, align='center', \n",
    "         color='#4D977E')\n",
    "plt.yticks(np.arange(n_features), breast_cancer.feature_names)\n",
    "plt.title('Random Forest Feature Importance')\n",
    "plt.xlabel(\"Feature importance\")\n",
    "plt.ylabel(\"Features\")\n",
    "plt.ylim(-1, n_features)\n",
    "plt.xlim(0,0.25);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predict Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2018-09-29T07:59:14.650Z"
    }
   },
   "outputs": [],
   "source": [
    "# Predict the results from our test data\n",
    "pd.Series(rf_model.predict(test_x)).head(n=7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### General Notes\n",
    "\n",
    "-- Trees are built in sequentially order so XGboost takes longer to train<br>\n",
    "-- XGBoost uses a loss function when computing the next tree, you have the abiltiy to change the loss function<br>\n",
    "-- You are building many trees and final results are an average of the trees<br>\n",
    "-- You can also apply l1 and l2 regularization to algorithim<br>\n",
    "-- XGBoost does not use entropy to leave splits but use a Gain instead<br>\n",
    "\n",
    "### Sources\n",
    "- [XGboost Documentation](https://xgboost.readthedocs.io/en/latest/python/python_api.html)\n",
    "- [Can XGBoost do better](https://www.youtube.com/watch?v=5CWwwtEM2TA)\n",
    "- [Gradient Boosting Machines](https://www.youtube.com/watch?time_continue=429&v=wPqtzj5VZus)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Author: Kavi Sekhon"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
