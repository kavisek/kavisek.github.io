{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Cross Validation and K-Fold\n",
    "\n",
    "\n",
    "<span>Cross-Validation is the general scoring technique for the model using only the training data set. The K-Fold cross-validation is a better heuristic for evaluating your model performance by running cross-validation on your training data multiple (K) times. Where each fold is unique from the last. Then taking the scores as the mean from al the cross validation scores.</span>\n",
    "\n",
    "\n",
    "Cross Validation: First 80% train -> Last 20% test\n",
    "\n",
    "K-Fold Cross (5 Sets): \n",
    "\n",
    "unique 80% train -> unique 20% test -> Score -\\ <br>\n",
    "unique 80% train -> unique 20% test -> Score --\\ <br>\n",
    "unique 80% train -> unique 20% test -> Score ----} Mean Score <br>\n",
    "unique 80% train -> unique 20% test -> Score --/ <br>\n",
    "unique 80% train -> unique 20% test -> Score -/<br>\n",
    "\n",
    "You can implement the K-Fold cross in a startified manner where each sample with each validation set is randomly selected. Note, Shuffled K-Fold Cross Validation is not recommend on data with seasonality or time series data.\n",
    "\n",
    "\n",
    "### Import Prelinimaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-07-23T19:02:21.404768Z",
     "start_time": "2018-07-23T15:02:20.545276-04:00"
    }
   },
   "outputs": [],
   "source": [
    "# Import modules\n",
    "import numpy as np\n",
    "from sklearn.datasets import load_boston\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "# Import data\n",
    "boston = load_boston()\n",
    "X, y = boston.data, boston.target"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fit Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-07-23T19:02:24.772391Z",
     "start_time": "2018-07-23T15:02:24.768016-04:00"
    }
   },
   "outputs": [],
   "source": [
    "# Fit Regression model\n",
    "regression = LinearRegression()\n",
    "regression.fit(X,y);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cross Validation Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-07-23T19:18:41.612398Z",
     "start_time": "2018-07-23T15:18:41.607771-04:00"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7406077428649428"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regression.score(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### K-Fol Cross Validation Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-07-23T19:51:01.205850Z",
     "start_time": "2018-07-23T15:51:01.178892-04:00"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Folds: 20, mean squared error: 31.92 std: 56.10\n"
     ]
    }
   ],
   "source": [
    "crossvalidation = KFold(n_splits=20, random_state=1, shuffle=False)\n",
    "\n",
    "scores = cross_val_score(regression, X, y, \n",
    "                         scoring ='neg_mean_squared_error', \n",
    "                         cv=crossvalidation, n_jobs =1)\n",
    "\n",
    "print('Folds: %i, mean squared error: %.2f std: %.2f' % (len(scores),\n",
    "                                                         np.mean(np.abs(scores)),\n",
    "                                                         np.std(scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Shuffled K-Fold Cross Validation Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-07-23T19:51:02.278195Z",
     "start_time": "2018-07-23T15:51:02.250686-04:00"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Folds: 20, mean squared error: 23.79 std: 14.03\n"
     ]
    }
   ],
   "source": [
    "crossvalidation = KFold(n_splits=20, random_state=1, shuffle=True)\n",
    "\n",
    "scores = cross_val_score(regression, X, y, \n",
    "                         scoring ='neg_mean_squared_error', \n",
    "                         cv=crossvalidation, n_jobs =1)\n",
    "\n",
    "print('Folds: %i, mean squared error: %.2f std: %.2f' % (len(scores),\n",
    "                                                         np.mean(np.abs(scores)),\n",
    "                                                         np.std(scores)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
